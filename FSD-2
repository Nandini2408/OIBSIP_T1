 2. (a). Demonstrate useState Hook with the help sample text

import React, { useState } from 'react';

function Counter() {
  // Declare a state variable named "count" initialized to 0
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      {/* When the button is clicked, setCount updates the state */}
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}

export default Counter;





 (b). Demonstrate useContext Hook with necessary example

import React, { createContext, useContext } from 'react';

// Create a context
const ThemeContext = createContext();

function App() {
  return (
    // Provide the context value at the top level
    <ThemeContext.Provider value="dark">
      <Toolbar />
    </ThemeContext.Provider>
  );
}

function Toolbar() {
  // Consume the context value within a component
  const theme = useContext(ThemeContext);
  return (
    <div>
      <p>Current theme: {theme}</p>
    </div>
  );
}

export default App;








(c). Demonstrate useEffect Hook with necessary example.

import React, { useState, useEffect } from 'react';

function Timer() {
  const [seconds, setSeconds] = useState(0);

  // Similar to componentDidMount and componentDidUpdate:
  useEffect(() => {
    // Update the seconds state every second
    const intervalId = setInterval(() => {
      setSeconds((prevseconds) => prevseconds + 1);
    }, 1000);

    // Update the document title using the browser API
    document.title = "You have been on this page for ${seconds} seconds";
    // Cleanup function to clear the interval when the component unmounts
    // eslint-disable-next-line no-undef
    return () => {
      clearInterval(intervalId);
  };
}, []);
  return (
    <div>
      <p>You've been on this page for {seconds} seconds</p>
    </div>
  );
}

export default Timer;
