 4. a)Demonstrate consuming web API using fetch & axios (AXIOS API). Demonstrate with the
 help of fake URL in React JS.


import React, { useState, useEffect } from 'react';
import axios from 'axios';

const MyComponent = () => {
  const [fetchData, setFetchData] = useState(null);
  const [axiosData, setAxiosData] = useState(null);
 
  // Using fetch
  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/posts/1')
      .then(response => response.json())
      .then(data => setFetchData(data))
      .catch(error => console.error('Error fetching data:', error));
  }, []);

  // Using Axios
  useEffect(() => {
    axios.get('https://jsonplaceholder.typicode.com/posts/1')
      .then(response => setAxiosData(response.data))
      .catch(error => console.error('Error fetching data:', error)); 
  }, []);

  return (
    <div>
      <h2>Fetch Data:</h2>
      {fetchData && (
        <div>
          <p>Title: {fetchData.title}</p>
          <p>Body: {fetchData.body}</p>
        </div>
      )}
      
      <h2>Axios Data:</h2>
      {axiosData && (
        <div>
          <p>Title: {axiosData.title}</p>
          <p>Body: {axiosData.body}</p>
        </div>
      )}
    </div>
  );
};

export default MyComponent;









 b) Demonstrate useEffect Hook with necessaryexample.

import React, { useState, useEffect } from 'react';

function Timer() {
  const [seconds, setSeconds] = useState(0);

  // Similar to componentDidMount and componentDidUpdate:
  useEffect(() => {
    // Update the seconds state every second
    const intervalId = setInterval(() => {
      setSeconds((prevseconds) => prevseconds + 1);
    }, 1000);

    // Update the document title using the browser API
    document.title = "You have been on this page for ${seconds} seconds";
    // Cleanup function to clear the interval when the component unmounts
    // eslint-disable-next-line no-undef
    return () => {
      clearInterval(intervalId);
  };
}, []);
  return (
    <div>
      <p>You've been on this page for {seconds} seconds</p>
    </div>
  );
}
export default Timer;
